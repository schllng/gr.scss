@mixin gr-build-classes($features: ()) {

  // generate grid classes without media query definitions
  @if length($_gr-states) == 0 {

    @include _gr-build-classes-without-states($features);
  } @else {

    @include _gr-build-classes($features);
  }
}

@mixin _gr-build-classes-without-states($features) {

  @if $gr-set-container-style {

    .#{$gr-namespace-class}-#{$gr-container-class} {

      @include _gr-container($gr-grid-max-width, $gr-container-padding);
    }
  }

  .#{$gr-namespace-class}-#{$gr-row-class} {

    @include _gr-row-base;
    @include _gr-row($gr-gutter);
  }

  @include _gr-col-selector-all {

    @include _gr-col-base($gr-gutter);
  }

  @for $i from 1 to $gr-columns + 1 {

    .#{$gr-namespace-class}-#{$i} {

      @include _gr-col($i, $gr-columns);
    }
  }

  @include _gr-build-modifier-classes($features, $gr-columns);
}

@mixin _gr-build-classes($features) {

  @include _gr-row-selector-states {

    @include _gr-row-base;
  }

  @each $state, $state-config in $_gr-states {

    @include _gr-media($state) {

      @if $gr-set-container-style {

        .#{$gr-namespace-class}-#{$gr-container-class},
        .#{$gr-namespace-class}-#{$gr-container-class}#{$gr-state-class-divider}#{$state} {

          $container-max-width: _gr-get-resp-val($state, container, max-width);
          $container-padding: _gr-get-resp-val($state, container, padding);

          @include _gr-container($container-max-width, $container-padding);
        }
      }

      .#{$gr-namespace-class}-#{$gr-row-class},
      .#{$gr-namespace-class}-#{$gr-row-class}#{$gr-state-class-divider}#{$state} {

        @include _gr-row(_gr-get-resp-val($state, gutter));
      }

      @include _gr-col-selector-all($state) {

        @include _gr-col-base(_gr-get-resp-val($state, gutter));
      }

      // seperate columns without state modifier
      // to override them by column classes with modifier
      @for $i from 1 to _gr-get-resp-val($state, columns) + 1 {

        .#{$gr-namespace-class}-#{$i} {

          @include _gr-col($i, _gr-get-resp-val($state, columns));
        }
      }

      @for $i from 1 to _gr-get-resp-val($state, columns) + 1 {

        .#{$gr-namespace-class}-#{$i}#{$gr-state-class-divider}#{$state} {

          @include _gr-col($i, _gr-get-resp-val($state, columns));
        }
      }

      @include _gr-build-modifier-classes($features, _gr-get-resp-val($state, columns), $state);
    }
  }
}

/**
 * Generates selectors for all columns for the given state ([.gr-1, .gr-2..., ].gr-1@...) and sets styles for them
 * @param  {String|null}  $state       null   The state identifier for which the selector should be build
 * @param  {Boolean}      $only-state  false  Wheter classes without state should be added or not
 */
@mixin _gr-col-selector-all($state: null, $only-state: false) {

  $_gr-classes: '';
  $column-count: if($state, _gr-get-resp-val($state, columns) + 1, $gr-columns + 1);

  @if not $only-state {

    @for $i from 1 to $column-count {

      @if $i == 1 {

        $_gr-classes: '.#{$gr-namespace-class}-#{$i}';
      } @else {

        $_gr-classes: $_gr-classes + ', ' + '.#{$gr-namespace-class}-#{$i}';
      }
    }
  }

  @if $state {

    @for $i from 1 to $column-count {

      @if $i == 1 and $only-state {

        $_gr-classes: '.#{$gr-namespace-class}-#{$i}#{$gr-state-class-divider}#{$state}';
      } @else {

        $_gr-classes: $_gr-classes + ', ' + '.#{$gr-namespace-class}-#{$i}#{$gr-state-class-divider}#{$state}';
      }
    }
  }

  #{$_gr-classes} {

    @content;
  }
}

/**
 * Generates selectors for all row elements (.gr-row, .gr-row@...) and sets styles for them
 */
@mixin _gr-row-selector-states() {

  $_gr-row-classes: '.#{$gr-namespace-class}-#{$gr-row-class}';

  @each $state, $state-config in $_gr-states {

    $_gr-row-classes: $_gr-row-classes + ', ' + '.#{$gr-namespace-class}-#{$gr-row-class}#{$gr-state-class-divider}#{$state}';
  }

  #{$_gr-row-classes} {

    @content;
  }
}

/**
 * Checks for activated modifiers and calls their build function
 * @param  {Map}          $features       Map of all supported modifiers and if they are active ({String}: {Boolean})
 * @param  {Number}       $columns        Column-count for modifiers to generate all necessary classes
 * @param  {String|null}  $state    null  The state identifier for which the modifiers should be build
 */
@mixin _gr-build-modifier-classes($features, $columns, $state: null) {

  $set-no-gutter-classes: map-get($features, no-gutter);
  $set-row-full-classes: map-get($features, row-full);
  $set-row-reverse-classes: map-get($features, row-reverse);
  $set-align-classes: map-get($features, align);
  $set-order-classes: map-get($features, order);
  $set-hide-show-classes: map-get($features, hide-show);
  $set-prefix-classes: map-get($features, prefix);
  $set-suffix-classes: map-get($features, suffix);
  $set-push-classes: map-get($features, push);
  $set-pull-classes: map-get($features, pull);

  @if $set-prefix-classes or $set-suffix-classes {

    @include _gr-build-modifier-prefix-suffix-classes($columns, $set-prefix-classes, $set-suffix-classes, $state);
  }

  @if $set-push-classes or $set-pull-classes {

    @include _gr-build-modifier-push-pull-classes($columns, $set-push-classes, $set-pull-classes, $state);
  }

  @if $set-no-gutter-classes {

    @include _gr-build-modifier-no-gutter-classes($state);
  }

  @if $set-row-full-classes {

    @include _gr-build-modifier-row-full-classes($state);
  }

  @if $set-row-reverse-classes {

    @include _gr-build-modifier-row-reverse-classes($state);
  }

  @if $set-align-classes {

    @include _gr-build-modifier-align-classes($state);
  }

  @if $set-order-classes {

    @include _gr-build-modifier-order-classes($columns, $state);
  }

  @if $set-hide-show-classes {

    @include _gr-build-modifier-hide-show-classes($state);
  }
}
