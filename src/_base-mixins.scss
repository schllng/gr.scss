

// ==============
// internals
// ==============

@mixin _gr-col-base($gutter) {

  padding-left: $gutter / 2;
  padding-right: $gutter / 2;
  box-sizing: border-box;
}

@mixin _gr-col($width, $columns) {

  width: #{100% / $columns * $width};
}

@mixin _gr-row-base() {

  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: auto;
  box-sizing: border-box;
};

@mixin _gr-row($gutter) {

  margin-left: #{ $gutter / -2};
  margin-right: #{ $gutter / -2};
};

@mixin _gr-container($max-width, $padding) {

  @if $max-width {

    max-width: $max-width;
  }

  @if $padding {

    padding-left: $padding;
    padding-right: $padding;
  }

  @if $gr-center-container {

    margin-left: auto;
    margin-right: auto;
  }

  box-sizing: border-box;
}


// ==============
// public
// ==============

@mixin gr-col($width, $breakpoint: null) {

  @if $breakpoint and length($gr-breakpoints) > 0 {

    @include _gr-media($breakpoint) {

      @include _gr-col-base(_gr-get-resp-val($breakpoint, gutter));
      @include _gr-col($width, _gr-get-resp-val($breakpoint, columns));
    }
  } @else if not $breakpoint and length($gr-breakpoints) > 0 {

    @each $breakpoint, $breakpoint-config in $gr-breakpoints {

      @include _gr-media($breakpoint) {

        @include _gr-col-base(_gr-get-resp-val($breakpoint, gutter));
        @include _gr-col($width, _gr-get-resp-val($breakpoint, columns));
      }
    }
  } @else {

    @include _gr-col-base($gr-gutter);
    @include _gr-col($width, $gr-columns);
  }
}

@mixin gr-row($breakpoint: null) {

  @if $breakpoint and length($gr-breakpoints) > 0 {

    @include _gr-media($breakpoint) {

      @include _gr-row-base;
      @include _gr-row(_gr-get-resp-val($breakpoint, gutter));
    }
  } @else if not $breakpoint and length($gr-breakpoints) > 0 {

    @include _gr-row-base;

    @each $breakpoint, $breakpoint-config in $gr-breakpoints {

      @include _gr-media($breakpoint) {

        @include _gr-row(_gr-get-resp-val($breakpoint, gutter));
      }
    }
  } @else {

    @include _gr-row-base;
    @include _gr-row($gr-gutter);
  }
}

@mixin gr-container($breakpoint: null) {

  @if $breakpoint and length($gr-breakpoints) > 0 {

    @include _gr-media($breakpoint) {

      $container-max-width: _gr-get-resp-val($breakpoint, container, max-width);
      $container-padding: _gr-get-resp-val($breakpoint, container, padding);

      @include _gr-container($container-max-width, $container-padding);
    }
  } @else if not $breakpoint and length($gr-breakpoints) > 0 {

    @each $breakpoint, $breakpoint-config in $gr-breakpoints {

      @include _gr-media($breakpoint) {

        $container-max-width: _gr-get-resp-val($breakpoint, container, max-width);
        $container-padding: _gr-get-resp-val($breakpoint, container, padding);

        @include _gr-container($container-max-width, $container-padding);
      }
    }
  } @else {

    @include _gr-container($gr-container-max-width, $gr-container-padding);
  }
}
